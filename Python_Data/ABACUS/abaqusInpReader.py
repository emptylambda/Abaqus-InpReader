from lark import Lark

abaquas_grammar = r"""
    ?start: list
    ?value: node
          | misc
          | heading
          | element
          | nset
          | nsetgenerate
          | elset
          | elsetgenerate
          | endstep

    list: [(_newline value)*]
    heading:"*Heading"
    node:"*Node" _NL [(indexed4fields _NL)*]
    indexed4fields: NUMBER "," floatingpoint "," floatingpoint "," floatingpoint

    endstep: "*End Step" 
    misc:"*" WORD "," [argument ("," argument)*]
    argument: WORD "=" CNAME

    element:"*Element" [("," argument)*] _NL [(indexed5fields _NL)*]
    indexed5fields: NUMBER "," NUMBER "," NUMBER "," NUMBER "," NUMBER

    nset:"*Nset" [("," argument)*] _NL [([NUMBER ("," NUMBER)*] _NL)*]
    nsetgenerate:"*Nset" [("," argument)*] ", generate" _NL NUMBER "," NUMBER "," NUMBER _NL

    elset:"*Elset" [("," argument)*] _NL [([NUMBER ("," NUMBER)*] _NL)*]
    elsetgenerate:"*Elset" [("," argument)*] ", generate" _NL NUMBER "," NUMBER "," NUMBER _NL

    floatingpoint: "-" FLOAT | FLOAT

    %import common.LETTER
    %import common.CNAME
    %import common.WORD
    %import common.NUMBER
    %import common.FLOAT
    %import common.WS_INLINE
    %ignore WS_INLINE

    _NL: /(\r?\n[\t ]*)+/
    COMMENT: DOUBLESTAR/[^\n]*/
    DOUBLESTAR: "**"
    _newline: (_NL | COMMENT )*
"""

abaquas_parser = Lark(abaquas_grammar, parser='lalr')
abaquas_read = abaquas_parser.parse

testString = """
*Heading
** Job name: nlBuckle_basic Model name: Model-2_NL
** Generated by: Abaqus/CAE 6.14-2
*Preprint, echo=YES, model=YES, history=YES, contact=YES
**
** PARTS
**
*Part, name=grillage
*Node
      1,   914.400024,           0.,           0.
      2,   914.400024,   25.3999996,           0.
      3,   914.400024,   50.7999992,           0.
      4,   914.400024,   76.1999969,           0.
      5,   914.400024,   101.599998,           0.
      6,   914.400024,         127.,           0.
      7,   914.400024,   152.399994,           0.
      8,   914.400024,   177.800003,           0.
      9,   914.400024,   203.199997,           0.
     10,   914.400024,   228.600006,           0.
     11,   914.400024,        -254.,           0.
     12,   914.400024,   279.399994,           0.
     13,   914.400024,   304.799988,           0.
     14,         889.,           0.,           0.
     15,    889.05719,   25.3999996,           0.
     16,   889.114441,   50.7999992,           0.
     17,   889.171631,   76.1999969,           0.
     18,   889.228821,   101.599998,           0.
     19,   889.286011,         127.,           0.
     20,   889.343262,   152.399994,           0.
*Element, type=S4R
  1,   1,   2,  15,  14
  2,   2,   3,  16,  15
  3,   3,   4,  17,  16
  4,   4,   5,  18,  17
  5,   5,   6,  19,  18
*Elset, elset=Set_transStiff_W
 40728, 40729, 40730, 40731, 40732, 40733, 40734, 40735, 40736, 40737, 40738, 40739, 40740, 40741, 40742, 40743
 40744, 40745, 40746, 40747, 40748, 40749, 40750, 40751, 40752, 40753, 40754, 40755, 40756, 40757, 40758, 40759
*Nset, nset=Set_transStiff_F
 28530, 28599, 28749, 28910, 28979, 29018, 31207, 31209, 31219, 31222, 31252, 31446, 31727, 31745, 31754, 31765
 31789, 31816, 31843, 32325, 41161, 41162, 41163, 41164, 41165, 41166, 41167, 41168, 41169, 41170, 41175, 41176
*Elset, elset=Set_botPl_A, generate
 12865,  28128,      1
*Nset, nset=Set_botPl_s1_w5, generate
   1,  494,    1
*Assembly, name=Assembly
*End Step"""


def main():
    while True:
        try:
            s = input('> ')
        except EOFError:
            break
        print(abaquas_read(s))


if __name__ == '__main__':
    print(abaquas_read(testString))
    # main()
